Template pattern

Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses.
Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
Base class declares algorithm 'placeholders', and derived classes implement the placeholders.
==================================================================


Strategy is like Template Method except in its granularity.
Template Method uses inheritance to vary part of an algorithm. Strategy uses delegation to vary the entire algorithm.
Strategy modifies the logic of individual objects. Template Method modifies the logic of an entire class.
Factory Method is a specialization of Template Method.
==================================================================


When to use?

The template method is used in frameworks, where each implements the invariant parts of a domain's architecture,
while providing hook methods for customization. This is an example of inversion of control. The template method is used
for the following reasons.

It lets subclasses implement varying behavior (through overriding of the hook methods).
It avoids duplication in the code: the general workflow of the algorithm is implemented once in the abstract class's
template method, and necessary variations are implemented in the subclasses.
It controls the point(s) at which specialization is permitted. If the subclasses were to simply override the template
method, they could make radical and arbitrary changes to the workflow. In contrast, by overriding only the hook methods,
only certain specific details of the workflow can be changed, and the overall workflow is left intact.